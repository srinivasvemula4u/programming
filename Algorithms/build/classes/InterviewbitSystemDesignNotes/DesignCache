
Design a distributed key value caching system, like Memcached or Redis.

1) Features
This is the first part of any system design interview, coming up with the 
features which the system should support. As an interviewee, you should try to 
list down all the features you can think of which our system should support. 
Try to spend around 2 minutes for this section in the interview. 
You can use the notes section alongside to remember what you wrote. 

Q) Q: What is the amount of data that we need to cache? 
A: Let's assume we are looking to cache on the scale of Google or Twitter. 
The total size of the cache would be a few TBs.

Q: What should be the eviction strategy? 
A: It is possible that we might get entries when we would not have space to 
accommodate new entries. In such cases, 
we would need to remove one or more entries to make space for the new entry.


Q: What should be the access pattern for the given cache? 
A: There are majorly three kinds of caching systems :

Write through cache : 
This is a caching system where writes go through the cache and write is 
confirmed as success only if writes to DB and the cache BOTH succeed. 
This is really useful for applications which write and re-read the information 
quickly. However, write latency will be higher in this case as there are writes 
to 2 separate systems.

Write around cache : This is a caching system where write directly goes to the 
DB. The cache system reads the information from DB incase of a miss. 
While this ensures lower write load to the cache and faster writes, 
this can lead to higher read latency incase of applications which write 
and re-read the information quickly.

Write back cache : This is a caching system where the write is directly done 
to the caching layer and the write is confirmed as soon as the write to the 
cache completes. The cache then asynchronously syncs this write to the DB. 
This would lead to a really quick write latency and high write throughput. 
But, as is the case with any non-persistent / in-memory write, we stand the 
risk of losing the data incase the caching layer dies. We can improve our odds
 by introducing having more than one replica acknowledging the write 
( so that we donâ€™t lose data if just one of the replica dies ).
